datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  phone          String?
  address        String?
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  admin          Boolean   @default(false)
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  price      Int
  address    String
  date       String
  orderItems OrderItem[]

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model OrderItem {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  price  Int
  amount Int
  image  String

  sizeId String? @db.ObjectId
  size   Size?   @relation(fields: [sizeId], references: [id])

  ingredients    Ingredient[] @relation(fields: [ingredientsIds], references: [id])
  ingredientsIds String[]     @db.ObjectId

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])
}

model Categories {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  items MenuItems[]
}

model MenuItems {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  price       Int
  image       String?

  sizeIds String[] @db.ObjectId
  sizes   Size[]   @relation(fields: [sizeIds], references: [id])

  ingredientsIds String[]     @db.ObjectId
  ingredients    Ingredient[] @relation(fields: [ingredientsIds], references: [id])

  categoryId String     @db.ObjectId
  category   Categories @relation(fields: [categoryId], references: [id])
}

model Size {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  price Int

  MenuIds   String[]    @db.ObjectId
  menuItems MenuItems[] @relation(fields: [MenuIds], references: [id])
  orders    OrderItem[]
}

model Ingredient {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  price Int

  MenuIds   String[]    @db.ObjectId
  menuItems MenuItems[] @relation(fields: [MenuIds], references: [id])
  orderIds  String[]    @db.ObjectId
  orders    OrderItem[] @relation(fields: [orderIds], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
